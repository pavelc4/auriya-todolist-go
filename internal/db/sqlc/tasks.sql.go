// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, status, priority, due_date)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, description, status, priority, due_date, created_at, updated_at
`

type CreateTaskParams struct {
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	Status      string             `json:"status"`
	Priority    int32              `json:"priority"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, status, priority, due_date, created_at, updated_at FROM tasks
WHERE ($1::text IS NULL OR status = $1)
  AND ($2::timestamptz IS NULL OR due_date <= $2)
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListTasksParams struct {
	Column1 string             `json:"column_1"`
	Column2 pgtype.Timestamptz `json:"column_2"`
	Limit   int32              `json:"limit"`
	Offset  int32              `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET 
  title = COALESCE($2, title),
  description = COALESCE($3, description),
  status = COALESCE($4, status),
  priority = COALESCE($5, priority),
  due_date = COALESCE($6, due_date),
  updated_at = NOW()
WHERE id = $1
RETURNING id, title, description, status, priority, due_date, created_at, updated_at
`

type UpdateTaskParams struct {
	ID          int64              `json:"id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	Status      string             `json:"status"`
	Priority    int32              `json:"priority"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
