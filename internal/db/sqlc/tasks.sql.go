// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, status, priority, due_date, user_id, project_id)
VALUES (
  $1,
  $2,
  COALESCE($3, 'pending'),
  COALESCE($4, 1),
  $5,
  $6,
  $7
)
RETURNING id, user_id, title, description, status, priority, due_date, created_at, updated_at, project_id
`

type CreateTaskParams struct {
	Title       string             `json:"title"`
	Description *string            `json:"description"`
	Status      interface{}        `json:"status"`
	Priority    interface{}        `json:"priority"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
	UserID      int64              `json:"user_id"`
	ProjectID   pgtype.Int8        `json:"project_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
		arg.UserID,
		arg.ProjectID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1 AND user_id = $2
`

type DeleteTaskParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.Exec(ctx, deleteTask, arg.ID, arg.UserID)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, user_id, title, description, status, priority, due_date, created_at, updated_at, project_id FROM tasks WHERE id = $1 AND user_id = $2
`

type GetTaskParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetTask(ctx context.Context, arg GetTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, user_id, title, description, status, priority, due_date, created_at, updated_at, project_id FROM tasks
WHERE user_id = $1
  AND ($2::text IS NULL OR status = $2::text)
  AND ($3::timestamptz IS NULL OR due_date <= $3::timestamptz)
ORDER BY created_at DESC
LIMIT $5 OFFSET $4
`

type ListTasksParams struct {
	UserID    int64              `json:"user_id"`
	Status    *string            `json:"status"`
	DueBefore pgtype.Timestamptz `json:"due_before"`
	Offset    int32              `json:"offset"`
	Limit     int32              `json:"limit"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks,
		arg.UserID,
		arg.Status,
		arg.DueBefore,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByProject = `-- name: ListTasksByProject :many
SELECT id, user_id, title, description, status, priority, due_date, created_at, updated_at, project_id FROM tasks
WHERE user_id = $1 AND project_id = $2
ORDER BY created_at DESC
`

type ListTasksByProjectParams struct {
	UserID    int64       `json:"user_id"`
	ProjectID pgtype.Int8 `json:"project_id"`
}

func (q *Queries) ListTasksByProject(ctx context.Context, arg ListTasksByProjectParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByProject, arg.UserID, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET
  title       = COALESCE($1, title),
  description = COALESCE($2, description),
  status      = COALESCE($3, status),
  priority    = COALESCE($4, priority),
  due_date    = COALESCE($5, due_date),
  project_id  = COALESCE($6, project_id)
WHERE id = $7 AND user_id = $8
RETURNING id, user_id, title, description, status, priority, due_date, created_at, updated_at, project_id
`

type UpdateTaskParams struct {
	Title       pgtype.Text        `json:"title"`
	Description *string            `json:"description"`
	Status      pgtype.Text        `json:"status"`
	Priority    pgtype.Int4        `json:"priority"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
	ProjectID   pgtype.Int8        `json:"project_id"`
	ID          int64              `json:"id"`
	UserID      int64              `json:"user_id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
		arg.ProjectID,
		arg.ID,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}
